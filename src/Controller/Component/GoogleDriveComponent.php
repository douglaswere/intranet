<?php
/**
 * Created by PhpStorm.
 * User: dwere
 * Date: 1/31/2019
 * Time: 4:36 PM
 */

namespace App\Controller\Component;

use Cake\Controller\Component;
use Google_Client;
use Google_Service_Drive;
use Google_Service_Drive_DriveFile;
use Google_Service_Drive_Permission;

class GoogleDriveComponent extends Component
{

    private $ApplicationName = 'Intranet';
    private $client;
    private $service;
    private $dir;

    // -----------------------------------------------------------------------------------
    // Constructor
    // -----------------------------------------------------------------------------------
    public function initialize(array $config)
    {
        parent::initialize($config); // TODO: Change the autogenerated stub
        // $this->getService();
        // set the credential array. All of these information can be found in the json file that was provied to you when you create
        // a service account
        $this->dir = ROOT . '\\';
        /**for linux**/
        // $this->dir = ROOT . '/';
        // create the new google client
        $this->client = new Google_Client();
        /* $guzzleClient = new \GuzzleHttp\Client(array('curl' => array(CURLOPT_SSL_VERIFYPEER => false,),));
         $this->client->setHttpClient($guzzleClient);*/
        $this->client->setAuthConfig($this->dir . 'client_id.json');
        $this->client->setApplicationName('Intranet');
        $this->client->addScope(Google_Service_Drive::DRIVE);
        $this->client->setAccessType('offline');
        $this->client->setApprovalPrompt('force');
    }

    public function setup()
    {
        // create the service
        // $this->service = new Google_Service_Drive($this->client);
        if (file_exists($this->dir . 'credentials.json')) {
            $access_token = file_get_contents($this->dir . 'credentials.json');
            $this->client->setAccessToken($access_token);
            //Refresh the token if it's expired.
            if ($this->client->isAccessTokenExpired()) {
                $refreshTokenSaved = $this->client->getRefreshToken();
                // $refreshTokenSaved = $client->getRefreshToken($access_token);
                // $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
                $this->client->fetchAccessTokenWithRefreshToken($refreshTokenSaved);
                // pass access token to some variable
                $accessTokenUpdated = $this->client->getAccessToken();
                $accessTokenUpdated['refresh_token'] = $refreshTokenSaved;
                //Set the new access token
                $accessToken = $refreshTokenSaved;
                $this->client->setAccessToken($accessToken);
                file_put_contents($this->dir . 'credentials.json', json_encode($accessTokenUpdated));
                return $this->client;

            }
            return $this->client;
        }
        // $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . 'cake/intranet/oauth/callback';
        $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/oauth2callback.php';
        header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));
        exit;

    }

    public function client()
    {
        if (file_exists($this->dir . 'credentials.json')) {
            $access_token = file_get_contents($this->dir . 'credentials.json');
            $this->client->setAccessToken($access_token);
            //Refresh the token if it's expired.
            /*$guzzleClient = new \GuzzleHttp\Client(array('curl' => array(CURLOPT_SSL_VERIFYPEER => false,),));
            $this->client->setHttpClient($guzzleClient);*/
            if ($this->client->isAccessTokenExpired()) {
                $refreshTokenSaved = $this->client->getRefreshToken();
                // $refreshTokenSaved = $client->getRefreshToken($access_token);
                // $client->fetchAccessTokenWithRefreshToken($client->getRefreshToken());
                $this->client->fetchAccessTokenWithRefreshToken($refreshTokenSaved);
                // pass access token to some variable
                $accessTokenUpdated = $this->client->getAccessToken();
                $accessTokenUpdated['refresh_token'] = $refreshTokenSaved;
                //Set the new access token
                $accessToken = $refreshTokenSaved;
                $this->client->setAccessToken($accessToken);
                file_put_contents($this->dir . 'credentials.json', json_encode($accessTokenUpdated));
                return $this->client;
            }
            return $this->client;

        }
        $redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . '/oauth2callback.php';
        header('Location: ' . filter_var($redirect_uri, FILTER_SANITIZE_URL));
        exit;

    }

    public function uploadImage($file, $client)
    {
        /* $guzzleClient = new \GuzzleHttp\Client(array('curl' => array(CURLOPT_SSL_VERIFYPEER => false,),));
         $client->setHttpClient($guzzleClient);*/
        $drive_service = new Google_Service_Drive($client);
        $file_drive = new \Google_Service_Drive_DriveFile();
        $file_drive->setName($file['name']);
        $file_drive->setDescription('Intranet image file');
        $file_drive->setMimeType('image/jpeg');
        $data = file_get_contents($file['tmp_name']);
        // $folderId = '0AIiZFlCqNHniUk9PVA';
        $createdFile = $drive_service->files->create($file_drive, array(
            'data' => $data,
            'mimeType' => 'image/jpeg',
            // 'parents' => array($folderId)
        ));
        return $createdFile->id;
    }
    // -----------------------------------------------------------------------------------
    // ShareWithUser
    // -----------------------------------------------------------------------------------
    public function setPermission($fileId, $client, $type, $role)
    {
        $drive_service = new Google_Service_Drive($client);
        $newPermission = new Google_Service_Drive_Permission();
        $newPermission->setType($type);
        $newPermission->setRole($role);
        $drive_service->permissions->create($fileId, $newPermission);
        return true;
    }

    public function listFiles($client)
    {
        $drive_service = new Google_Service_Drive($client);
        return $drive_service->files->listFiles(array())->getFiles();
    }

    public function move($fileId, $parent)
    {
        // move this file
        $emptyFileMetadata = new Google_Service_Drive_DriveFile();
        // Retrieve the existing parents to remove
        $fileInfo = $this->service->files->get($fileId, array('fields' => 'parents'));
        $previousParents = join(',', $fileInfo->parents);
        // Move the file to the new folder
        $fileInfo = $this->service->files->update($fileId, $emptyFileMetadata, array(
            'addParents' => $parent,
            'removeParents' => $previousParents,
            'fields' => 'id, parents',
            'supportsTeamDrives' => true,
        ));
    }
    // -----------------------------------------------------------------------------------
    // delete a folder or a file
    // -----------------------------------------------------------------------------------
    public function delete($fileId, $client)
    {
        $drive_service = new Google_Service_Drive($client);
        $drive_service->files->delete($fileId, array('supportsTeamDrives' => true));
    }
}
